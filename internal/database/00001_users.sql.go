// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: 00001_users.sql

package database

import (
	"context"
	"database/sql"
)

const checkEmailExists = `-- name: CheckEmailExists :one
SELECT  COUNT(*) FROM users
WHERE email = ? AND deleted_at IS NULL
`

func (q *Queries) CheckEmailExists(ctx context.Context, email string) (int64, error) {
	row := q.db.QueryRowContext(ctx, checkEmailExists, email)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const checkEmailExistsExceptID = `-- name: CheckEmailExistsExceptID :one
SELECT COUNT(*) FROM users
WHERE email = ? AND id != ? AND deleted_at IS NULL
`

type CheckEmailExistsExceptIDParams struct {
	Email string
	ID    string
}

func (q *Queries) CheckEmailExistsExceptID(ctx context.Context, arg CheckEmailExistsExceptIDParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, checkEmailExistsExceptID, arg.Email, arg.ID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const countUsers = `-- name: CountUsers :one
SELECT COUNT(*) FROM users WHERE deleted_at IS NULL
`

func (q *Queries) CountUsers(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, countUsers)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createUser = `-- name: CreateUser :execresult
INSERT INTO users (
    first_name, last_name, email, password, age, phone, status
) VALUES (
    ?, ?, ?, ?, ?, ?, ?
)
`

type CreateUserParams struct {
	FirstName string
	LastName  string
	Email     string
	Password  string
	Age       sql.NullInt32
	Phone     sql.NullString
	Status    NullUsersStatus
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createUser,
		arg.FirstName,
		arg.LastName,
		arg.Email,
		arg.Password,
		arg.Age,
		arg.Phone,
		arg.Status,
	)
}

const deleteUser = `-- name: DeleteUser :execresult
DELETE FROM users
WHERE id = ? AND deleted_at IS NULL
`

func (q *Queries) DeleteUser(ctx context.Context, id string) (sql.Result, error) {
	return q.db.ExecContext(ctx, deleteUser, id)
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT 
    id, first_name, last_name, email, age, phone, status, created_at, updated_at, deleted_at
FROM users
WHERE email = ? AND deleted_at IS NULL
`

type GetUserByEmailRow struct {
	ID        string
	FirstName string
	LastName  string
	Email     string
	Age       sql.NullInt32
	Phone     sql.NullString
	Status    NullUsersStatus
	CreatedAt sql.NullTime
	UpdatedAt sql.NullTime
	DeletedAt sql.NullTime
}

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (GetUserByEmailRow, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i GetUserByEmailRow
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.Age,
		&i.Phone,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one
SELECT 
    id, first_name, last_name, email, age, phone, status, created_at, updated_at, deleted_at
FROM users
WHERE id = ? AND deleted_at IS NULL
`

type GetUserByIDRow struct {
	ID        string
	FirstName string
	LastName  string
	Email     string
	Age       sql.NullInt32
	Phone     sql.NullString
	Status    NullUsersStatus
	CreatedAt sql.NullTime
	UpdatedAt sql.NullTime
	DeletedAt sql.NullTime
}

func (q *Queries) GetUserByID(ctx context.Context, id string) (GetUserByIDRow, error) {
	row := q.db.QueryRowContext(ctx, getUserByID, id)
	var i GetUserByIDRow
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.Age,
		&i.Phone,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getUserByStatus = `-- name: GetUserByStatus :many
SELECT 
    id, first_name, last_name, email, age, phone, status, created_at, updated_at, deleted_at
FROM users
WHERE status = ? AND deleted_at IS NULL
ORDER BY created_at DESC
LIMIT ? OFFSET ?
`

type GetUserByStatusParams struct {
	Status NullUsersStatus
	Limit  int32
	Offset int32
}

type GetUserByStatusRow struct {
	ID        string
	FirstName string
	LastName  string
	Email     string
	Age       sql.NullInt32
	Phone     sql.NullString
	Status    NullUsersStatus
	CreatedAt sql.NullTime
	UpdatedAt sql.NullTime
	DeletedAt sql.NullTime
}

func (q *Queries) GetUserByStatus(ctx context.Context, arg GetUserByStatusParams) ([]GetUserByStatusRow, error) {
	rows, err := q.db.QueryContext(ctx, getUserByStatus, arg.Status, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetUserByStatusRow
	for rows.Next() {
		var i GetUserByStatusRow
		if err := rows.Scan(
			&i.ID,
			&i.FirstName,
			&i.LastName,
			&i.Email,
			&i.Age,
			&i.Phone,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserWithPasswordByEmail = `-- name: GetUserWithPasswordByEmail :one
SELECT 
    id, first_name, last_name, email, password, age, phone, status,
    created_at, updated_at, deleted_at
FROM users
WHERE email = ? AND deleted_at IS NULL
`

func (q *Queries) GetUserWithPasswordByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserWithPasswordByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.Password,
		&i.Age,
		&i.Phone,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getUsers = `-- name: GetUsers :many

SELECT 
    id, first_name, last_name, email, age, phone, status, created_at, updated_at, deleted_at
FROM users
WHERE  deleted_at IS NULL
ORDER BY created_at DESC
LIMIT ? OFFSET ?
`

type GetUsersParams struct {
	Limit  int32
	Offset int32
}

type GetUsersRow struct {
	ID        string
	FirstName string
	LastName  string
	Email     string
	Age       sql.NullInt32
	Phone     sql.NullString
	Status    NullUsersStatus
	CreatedAt sql.NullTime
	UpdatedAt sql.NullTime
	DeletedAt sql.NullTime
}

// sql/queries/users.sql
func (q *Queries) GetUsers(ctx context.Context, arg GetUsersParams) ([]GetUsersRow, error) {
	rows, err := q.db.QueryContext(ctx, getUsers, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetUsersRow
	for rows.Next() {
		var i GetUsersRow
		if err := rows.Scan(
			&i.ID,
			&i.FirstName,
			&i.LastName,
			&i.Email,
			&i.Age,
			&i.Phone,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const restoreUser = `-- name: RestoreUser :execresult
UPDATE users
SET
    deleted_at = NULL,
    updated_at = CURRENT_TIMESTAMP
WHERE id = ?
`

func (q *Queries) RestoreUser(ctx context.Context, id string) (sql.Result, error) {
	return q.db.ExecContext(ctx, restoreUser, id)
}

const softDeleteUser = `-- name: SoftDeleteUser :execresult
UPDATE users
SET
    deleted_at = CURRENT_TIMESTAMP,
    updated_at = CURRENT_TIMESTAMP
WHERE id = ? AND deleted_at IS NULL
`

func (q *Queries) SoftDeleteUser(ctx context.Context, id string) (sql.Result, error) {
	return q.db.ExecContext(ctx, softDeleteUser, id)
}

const updateUser = `-- name: UpdateUser :execresult
UPDATE users
SET 
    first_name = ?, last_name = ?, email = ?, age = ?, phone = ?, status = ?, updated_at = CURRENT_TIMESTAMP
WHERE id = ? AND deleted_at IS NULL
`

type UpdateUserParams struct {
	FirstName string
	LastName  string
	Email     string
	Age       sql.NullInt32
	Phone     sql.NullString
	Status    NullUsersStatus
	ID        string
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, updateUser,
		arg.FirstName,
		arg.LastName,
		arg.Email,
		arg.Age,
		arg.Phone,
		arg.Status,
		arg.ID,
	)
}

const updateUserPartial = `-- name: UpdateUserPartial :exec
UPDATE users
SET
    first_name = COALESCE(?, first_name),
    last_name = COALESCE(?, last_name),
    email = COALESCE(?, email),
    age = COALESCE(?, age),
    phone = COALESCE(?, phone),
    status = COALESCE(?, status),
    updated_at = CURRENT_TIMESTAMP
WHERE id = ? AND deleted_at IS NULL
`

type UpdateUserPartialParams struct {
	FirstName string
	LastName  string
	Email     string
	Age       sql.NullInt32
	Phone     sql.NullString
	Status    NullUsersStatus
	ID        string
}

func (q *Queries) UpdateUserPartial(ctx context.Context, arg UpdateUserPartialParams) error {
	_, err := q.db.ExecContext(ctx, updateUserPartial,
		arg.FirstName,
		arg.LastName,
		arg.Email,
		arg.Age,
		arg.Phone,
		arg.Status,
		arg.ID,
	)
	return err
}
